first initialize git init 
then check the git status
stage the file using " git add "filename" "
to commit use the command " git commit -m "message" " to add a message
the message should be in present tense by convention
to check the commit type ""git log""
once done if the file content gets altered 
can do one thing that is "git diff {filename}" to see what changes
if want to go back use the command "git checkout {filename}"

in case of gitigore just go to the file and mention the file as usual which u want to be ignored
before that remove all of them from commit stage by the use of command "git rm -r --cached {filename}"
it will remove from the staging area
once done then add all of them by the "git add ." and do the commit command.

to access the working repo we need the command "git remote add origin {url of repo}"
"git push -u origin main" is used to push the local repo to working repo
for cloning do "git clone {url of github}"

now for learning branching and merging we need to understand it very clearly
we have a main branch which is final one 
so to change something better way is to create another branch and make the respective change in the code and
finally merge it to the the main branch
for branching use the command "git branch {name}"

"git checkout {new branch name}" is used to switch branch
go back to main branch and then "git merge {branch}"
close the editor file and as a result it gets merged


Forking:
first of all copy the remote repo to your remote repo by clicking on the fork req.
then do the necessary modification in your local repo by cloning and push to the remote repo and do the changes
then send for pull request with a suitable message of modification
now the main owner will accept the pull request and it is shown in the main repo.
